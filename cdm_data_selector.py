'''
This code is written to select representative values for CDM
'''

import pandas as pd
import numpy as np
import os

def read_files(year):
    '''
    meta_all  : Output excel file generated by read_diocm.py
    val_spine : Output csv file generated by json_parser.py
    val_femur : as above
    '''
    meta_all = pd.read_excel('D:/'+year+'.xlsx',
                            sheet_name='Sheet1',
                            header = 0)
    val_spine = pd.read_csv('FINAL\\[FINAL]'+year+' - spine.csv')
    val_femur = pd.read_csv('FINAL\\[FINAL]'+year+' - femur.csv')
    val_spine = val_spine.fillna('NULL')
    val_femur = val_femur.fillna('NULL')
    
    return meta_all, val_spine, val_femur


def make_groups_from(meta_all):
    
    age_cutoff1 = meta_all.PatientAge.str.extract(r'([\d]+)', expand=False) > '019'
    age_cutoff2 = meta_all['PatientAge'].str.contains('Y')
    # select patient
    df_init = meta_all[age_cutoff1 & age_cutoff2]

    eldery = df_init.PatientAge.str.extract(r'([\d]+)', expand=False) >= '050'
    youth  = df_init.PatientAge.str.extract(r'([\d]+)', expand=False) < '050'

    # group by Patient's Age and ProtocolName
    df_eldery = df_init[eldery]
    df_youth  = df_init[youth]
    
    # drop unvalid Protocol records

    df_eldery = df_eldery.drop(
        df_eldery[~((df_eldery.ProtocolName == "AP Spine") | 
                    (df_eldery.ProtocolName == "Left Femur") | 
                    (df_eldery.ProtocolName == "Right Femur"))].index)

    df_youth = df_youth.drop(
        df_youth[~((df_youth.ProtocolName == "AP Spine") | 
                    (df_youth.ProtocolName == "Left Femur") | 
                    (df_youth.ProtocolName == "Right Femur"))].index)
        
    return df_eldery, df_youth


def find_values(age, df):

    if age == 'eldery':
        suffix = " T-Score"
    else:
        suffix = " Z-Score"

    groupby_ID = df.groupby(['PatientID','PatientBirthDate','StudyDate'])

    for index, val in enumerate(groupby_ID):
        key, group = val

        spine_bmd = spine_score = left_femur_bmd = left_femur_score = right_femur_bmd = right_femur_score = ""

        for t in group.itertuples():
            filename = getattr(t,'SOPInstanceUID')
            ProtocolName = getattr(t,'ProtocolName')

            if ProtocolName == "AP Spine":
                spine_record = val_spine.loc[val_spine['filename'] == filename]
                if len(spine_record) == 0:
                    break
                else:
                    if spine_record['L1-L4'+suffix ].values[0] != 'NULL':
                        spine_score = spine_record['L1-L4'+suffix ].values[0]
                        spine_bmd = spine_record["L1-L4 BMD"].values[0]
                    else:
                        spine_score = spine_record["L2-L4"+suffix].values[0]
                        spine_bmd = spine_record["L2-L4 BMD"].values[0]
            elif 'Femur' in ProtocolName:
                femur_record = val_femur.loc[val_femur['filename'] == filename]
                if len(femur_record) == 0:
                    break
                else:
                    try:
                        a = float(femur_record['Neck'+suffix].values[0])
                        femur_score = a
                        femur_bmd = femur_record["Neck BMD"].values[0] 

                        b = float(femur_record['Total'+suffix].values[0])
                        if b <= a:
                            femur_score = b
                            femur_bmd = femur_record["Total BMD"].values[0]
                    except ValueError: #Total T-score is NULL
                        pass

                if 'Right' in ProtocolName:
                    right_femur_bmd = femur_bmd
                    right_femur_score = femur_score
                else:
                    left_femur_bmd = femur_bmd
                    left_femur_score = femur_score
            else:
                print(ProtocolName)

        else:
            save_to_dict(age, index, 
                            key[0],
                            key[1],
                            key[2],
                            spine_score,
                            left_femur_score,
                            right_femur_score,
                            spine_bmd,
                            left_femur_bmd,
                            right_femur_bmd
                        )
    else:
        return 'Success'
    return f'{y}_{ProtocolName}: {filename}'

def save_to_dict(age, index, *args):
    if age == "eldery":
        cdm_0['PatientID'][index] = args[0]
        cdm_0['PatientBirthDate'][index] = args[1]
        cdm_0['StudyDate'][index] = args[2]
        cdm_0['Spine T-Score'][index] = args[3]
        cdm_0['Left Femur T-Score'][index] = args[4]
        cdm_0['Right Femur T-Score'][index] = args[5]
        cdm_0['Spine BMD'][index] = args[6]
        cdm_0['Left Femur BMD'][index] = args[7]
        cdm_0['Right Femur BMD'][index] = args[8]
    else:
        cdm_1['PatientID'][index] = args[0]
        cdm_1['PatientBirthDate'][index] = args[1]
        cdm_1['StudyDate'][index] = args[2]
        cdm_1['Spine Z-Score'][index] = args[3]
        cdm_1['Left Femur Z-Score'][index] = args[4]
        cdm_1['Right Femur Z-Score'][index] = args[5]
        cdm_1['Spine BMD'][index] = args[6]
        cdm_1['Left Femur BMD'][index] = args[7]
        cdm_1['Right Femur BMD'][index] = args[8]


years = range(2007,2020)

for y in years:
    # Patient who is or older than 50 years old
    cdm_0 = dict.fromkeys(['PatientID', 'PatientBirthDate', 'StudyDate', 
                           'Spine BMD', 'Spine T-Score', 
                           'Left Femur BMD', 'Left Femur T-Score',
                           'Right Femur BMD', 'Right Femur T-Score'], {})
  
    # Patient who is younger than 50 years old
    cdm_1 = dict.fromkeys(['PatientID', 'PatientBirthDate', 'StudyDate', 
                           'Spine BMD', 'Spine Z-Score', 
                           'Left Femur BMD', 'Left Femur Z-Score',
                           'Right Femur BMD', 'Right Femur Z-Score'], {})
    
    meta_all, val_spine, val_femur = read_files(str(y))
    df_eldery, df_youth = make_groups_from(meta_all)
   
    d = {'eldery': df_eldery, 'youth': df_youth}
    
    for key, val in d.items():
        res = find_values(key, val)
        if res == 'Success':
            if key == 'eldery':
                pd.DataFrame.from_dict(cdm_0).to_csv('cdm_e_'+str(y)+'.csv', encoding='utf-8', index=False)
                print(f'eldery group:{len(cdm_0):,}')
            else:
                pd.DataFrame.from_dict(cdm_1).to_csv('cdm_y_'+str(y)+'.csv', encoding='utf-8', index=False)
                print(f'youth group:{len(cdm_1):,}')
        else:
            print(res)
